---
title: สร้างข่าวใหม่
slug: creating-posts
date: 0007/01/01
number: 7
contents: เรียนรู้วิธี submit ข่าวจากฝั่งไคลเอนต์|เพิ่มการตรวจสอบความปลอดภัยอย่างง่าย|ป้องกันการเข้าถึงฟอร์ม submit|เรียนรู้วิธีเพิ่มความปลอดภัยด้วยเมธอดฝั่งเซิร์ฟเวอร์
paragraphs: 60
---

เราก็เห็นกันแล้วว่า การสร้างข่าวใหม่จากคอนโซลนั้นง่ายแค่ไหน ด้วยการเรียกใช้คำสั่ง `Posts.insert` ของฐานข้อมูล แต่เราก็คาดหวังไม่ได้ว่า ผู้ใช้จะเปิดคอนโซลแล้วสร้างข่าวใหม่เข้าไปเอง

ในที่สุดแล้วเราก็จำเป็นต้องสร้างส่วนติดต่อผู้ใช้บางอย่าง เพื่อช่วยให้ผู้ใช้งานสามารถโพสต์ข่าวเข้าไปที่แอพเราได้ 

### สร้างหน้าโพสต์ข่าว

เราเริ่มต้นด้วยการสร้างเส้นทางไปที่หน้าใหม่ของเรา

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  notFoundTemplate: 'notFound',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.route('/', {name: 'postsList'});

Router.route('/posts/:_id', {
  name: 'postPage',
  data: function() { return Posts.findOne(this.params._id); }
});

Router.route('/submit', {name: 'postSubmit'});

Router.onBeforeAction('dataNotFound', {only: 'postPage'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "15" %>

### เพิ่มลิงก์ที่ส่วนหัว

ด้วยเส้นทางที่เราสร้างขึ้นใหม่ ตอนนี้เราก็จะเพิ่มลิงก์ไปหน้า submit ที่ส่วนหัวของหน้าเว็บ

~~~html
<template name="header">
  <nav class="navbar navbar-default" role="navigation">
    <div class="container-fluid">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navigation">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="{{pathFor 'postsList'}}">Microscope</a>
      </div>
      <div class="collapse navbar-collapse" id="navigation">
        <ul class="nav navbar-nav">
          <li><a href="{{pathFor 'postSubmit'}}">Submit Post</a></li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
          {{> loginButtons}}
        </ul>
      </div>
    </div>
  </nav>
</template>
~~~
<%= caption "client/templates/includes/header.html" %>
<%= highlight "14~16" %>

การที่เรากำหนดเส้นทางก็หมายถึงว่า ถ้าผู้ใช้เปิดเข้าไปที่พาธ `/submit` Meteor ก็จะแสดงเทมเพลต `postSubmit` ด้วย ดังนั้นเราก็จะมาเขียนเทมเพลตนี้กัน

~~~html
<template name="postSubmit">
  <form class="main form">
    <div class="form-group">
      <label class="control-label" for="url">URL</label>
      <div class="controls">
          <input name="url" id="url" type="text" value="" placeholder="Your URL" class="form-control"/>
      </div>
    </div>
    <div class="form-group">
      <label class="control-label" for="title">Title</label>
      <div class="controls">
          <input name="title" id="title" type="text" value="" placeholder="Name your post" class="form-control"/>
      </div>
    </div>
    <input type="submit" value="Submit" class="btn btn-primary"/>
  </form>
</template>
~~~
<%= caption "client/templates/posts/post_submit.html" %>

จะเห็นว่า มีการใช้มาร์คอัพพอสมควรในเทมเพลต เหตุผลง่ายๆก็เพราะเราใช้ Twitter Bootstrap ซึ่งนอกจากส่วนประกอบที่จำเป็นของฟอร์มแล้ว มาร์คอัพพิเศษพวกนี้ก็จะช่วยให้แอพเราดูดีขึ้นด้วย และมันควรจะออกมาคล้ายๆ แบบนี้

<%= screenshot "7-1", "The post submit form" %>

เนื่องจากฟอร์มนี้เป็นแบบง่ายๆ เราจึงไม่ต้องกังวลกับการทำงานของมันนัก เพราะว่ายังไงเราก็จะดักจับเหตุการณ์ตอน submit และอัพเดทข้อมูลด้วยจาวาสคริปต์อยู่แล้ว (และก็ไม่มีเหตุผลที่จะต้องหาทางออกในกรณีไม่มีจาวาสคริปต์ เพราะถ้าคุณพิจารณาดูจะเห็นว่าแอพ Meteor ทำงานไม่ได้อยู่แล้วถ้าจาวาสคริปต์ไม่ทำงาน)

### สร้างข่าวใหม่

ได้เวลาที่จะจัดการกับเหตุการณ์ `submit` ของฟอร์มกันแล้ว วิธีที่ดีที่สุดคือ ผูกโค้ดเข้ากับเหตุการณ์ `submit` โดยตรง (จะดีกว่าผูกเข้ากับเหตุการณ์ `click` ของปุ่ม) ซึ่งจะครอบคลุมการ submit ที่อาจเกิดขึ้นได้ทั้งหมด (เช่น กดปุ่ม enter เป็นต้น)

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val()
    };
    
    post._id = Posts.insert(post);
    Router.go('postPage', post);
  }
});
~~~
<%= caption "client/templates/posts/post_submit.js" %>

<%= commit "7-1", "Added a submit post page and linked to it in the header." %>

โดยฟังก์ชันนี้ใช้ [jQuery](http://jquery.com/) เพื่อแปลงค่าที่ได้จากฟิลด์ต่างๆในฟอร์ม และสร้างอ็อบเจกต์โพสต์จากค่าเหล่านั้น ที่เราต้องเรียก `preventDefault` จากพารามิเตอร์ `event` ก็เพื่อให้แน่ใจว่า เบราว์เซอร์จะไม่พยายาม submit เอง

ในช่วงท้ายของโค้ด เราก็สามารถสั่งให้ตัวจัดการเส้นทางส่งเราไปที่หน้าสร้างข่าวใหม่ได้ ทั้งนี้ฟังก์ชัน `insert()` ที่กระทำกับคอลเลคชั่นจะคืนค่า `_id` ของอ็อบเจกต์ใหม่ที่เพิ่งถูกแทรกเข้าไปในฐานข้อมูล ซึ่งฟังก์ชัน `go()` ของตัวจัดการเส้นทางจะนำไปสร้างพาธ URL ให้เราเปิดเข้าไปใช้งานได้

ผลลัพธ์ที่ได้เมื่อผู้ใช้กดปุ่ม submit ก็คือ ข่าวใหม่ถูกสร้างขึ้น และผู้ใช้ถูกพาเข้าไปที่หน้าสนทนาของข่าวที่สร้างใหม่นั้นทันที

### เพิ่มความปลอดภัยเข้าไป

หน้าสร้างข่าวใหม่ใช้งานได้ดีทีเดียว แต่เราก็ไม่อยากให้ใครก็ตามที่แค่เข้ามาชมเว็บสามารถใช้งานมันได้ สิ่งที่เราต้องการคือ ให้ล็อกอินเข้ามาก่อนถึงจะใช้ได้ แน่นอนว่าเราสามารถซ่อนฟอร์มสร้างข่าวใหม่จากผู้ใช้ที่ล็อกเอาท์ไปแล้วได้ แต่ผู้ใช้ก็ยังสามารถหลอกเราด้วยการสร้างข่าวจากคอนโซลของเบราว์เซอร์โดยไม่ต้องล็อกอิน ซึ่งเราไม่อยากให้เป็นแบบนั้นแน่

ต้องขอบคุณระบบรักษาความปลอดภัยข้อมูลที่ถูกสร้างรวมมากับคอลเลคชั่น Meteor ตั้งแต่แรก แต่มันถูกปิดไว้ตามค่าตั้งต้นตอนที่คุณสร้างโปรเจกต์ใหม่ เพื่อช่วยให้คุณเริ่มสร้างแอพได้ง่ายขึ้น โดยทิ้งเรื่องน่าเบื่อต่างๆไว้ทีหลัง

ตอนนี้แอพเราก็ไม่ต้องการตัวช่วยพวกนี้อีกแล้ว ดังนั้นก็ปิดมันซะเลย!  โดยการถอนแพ็คเกจ `insecure` ออกมาดังนี้

~~~bash
meteor remove insecure
~~~
<%= caption "Terminal" %>

หลังจากทำตรงนี้ คุณจะสังเกตุว่า ฟอร์มป้อนข่าวใหม่ใช้งานได้ไม่ดีเหมือนเดิม นั่นก็เพราะว่า เมื่อไม่มีแพ็คเกจ `insecure` แล้ว การเพิ่มข้อมูลข่าวเข้าไปในคอลเลคชั่นที่ไคลเอนต์จะ *ไม่สามารถทำได้อีก*

และเราจำเป็นที่จะต้องกำหนดกฏเกณฑ์ชัดเจนให้ Meteor รู้ว่า มันโอเคที่จะให้ไคลเอนต์เพิ่มข้อมูลเข้ามาได้ หรือไม่เราก็ต้องจัดการเพิ่มข้อมูลที่ฝั่งเซิร์ฟเวอร์แทน

### ยอมให้เพิ่มข่าวได้

เริ่มต้นด้วยการที่เราจะแสดงให้ดูว่า ทำอย่างไรจึงจะยอมให้ไคลเอนต์สามารถเพิ่มข่าวได้ เพื่อที่จะให้ฟอร์มของเราทำงานได้อีกครั้ง ซึ่งในท้ายที่สุดแล้วเราอาจจะจบลงด้วยเทคนิคอีกแบบนึง แต่ทว่าตอนนี้ลองทำตามแบบง่ายๆนี้ดูก่อน

~~~js
Posts = new Mongo.Collection('posts');

Posts.allow({
  insert: function(userId, doc) {
    // only allow posting if you are logged in
    return !! userId;
  }
});
~~~
<%= caption "lib/collections/posts.js" %>
<%= highlight "3~8" %>

<%= commit "7-2", "Removed insecure, and allowed certain writes to posts." %>

เราเรียกใช้ `Posts.allow` เพื่อบอกให้ Meteor รู้ว่า "สิ่งนี้คือชุดเหตุการณ์ซึ่งเรายอมให้ไคลเอนต์ทำอะไรกับคอลเลคชั่น `Posts` ได้บ้าง" โดยในกรณีนี้ เราก็บอกว่า "เรายอมให้ไคลเอนต์เพิ่มข่าวใหม่เข้าไปตราบเท่าที่พวกเค้ามี `userID`" 

ค่า `userId` ของผู้ใช้ตอนที่กำลังแก้ไขข้อมูลจะถูกส่งต่อไปที่ฟังก์ชัน `allow` และ `deny` (หรือมีค่าเป็น `null` ถ้าผู้ใช้ยังไม่ได้ล็อกอิน) ซึ่งนำไปใช้ประโยชน์ต่อได้ และในเมื่อบัญชีผู้ใช้ก็เป็นส่วนหนึ่งของ Meteor ด้วยแล้ว เราจึงมั่นใจได้ว่า `userId` จะมีค่าที่ถูกต้องเสมอ

และเราก็ได้ทำให้แน่ใจแล้วว่า คุณจำเป็นต้องล็อกอินก่อนถึงจะสร้างข่าวใหม่ได้ ถึงตรงนี้ลองล็อกเอาท์และสร้างข่าวใหม่ดู คุณจะเห็นข้อความแบบนี้ขึ้นที่คอนโซล

<%= screenshot "7-2", "Insert failed: Access denied " %>

แต่อย่างไรก็ตาม ยังมีเรื่องที่เราต้องจัดการอีกสองสามอย่างคือ

- ผู้ใช้ที่ล็อกเอาท์ ยังคงเข้าไปที่หน้าฟอร์มสร้างข่าวได้
- ข่าวที่สร้างใหม่ ก็ไม่ได้มีความเกี่ยวข้องอะไรกับผู้ใช้เลย (และไม่มีโค้ดที่เซิร์ฟเวอร์จัดการเรื่องนี้ด้วย)
- ข่าวใหม่ๆ สามารถสร้างให้ชี้ไปที่พาธ URL เดียวกันได้

เราจะมาแก้ไขเรื่องพวกนี้กัน

### Securing Access To The New Post Form

//// 

////

////

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  notFoundTemplate: 'notFound',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.route('/', {name: 'postsList'});

Router.route('/posts/:_id', {
  name: 'postPage',
  data: function() { return Posts.findOne(this.params._id); }
});

Router.route('/submit', {name: 'postSubmit'});

var requireLogin = function() {
  if (! Meteor.user()) {
    this.render('accessDenied');
  } else {
    this.next();
  }
}

Router.onBeforeAction('dataNotFound', {only: 'postPage'});
Router.onBeforeAction(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "17~23,26" %>

////

~~~html
<template name="accessDenied">
  <div class="access-denied jumbotron">
    <h2>Access Denied</h2>
    <p>You can't get here! Please log in.</p>
  </div>
</template>
~~~
<%= caption "client/templates/includes/access_denied.html" %>

<%= commit "7-3", "Denied access to new posts page when not logged in." %>

////

<%= screenshot "7-3", "The access denied template" %>

////

////

//// 

////

////

~~~js
//...

var requireLogin = function() {
  if (! Meteor.user()) {
    if (Meteor.loggingIn()) {
      this.render(this.loadingTemplate);
    } else {
      this.render('accessDenied');
    }
  } else {
    this.next();
  }
}

Router.onBeforeAction('dataNotFound', {only: 'postPage'});
Router.onBeforeAction(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "5~10" %>

<%= commit "7-4", "Show a loading screen while waiting to login." %>

### Hiding the Link

////

~~~html
//...

<ul class="nav navbar-nav">
  {{#if currentUser}}<li><a href="{{pathFor 'postSubmit'}}">Submit Post</a></li>{{/if}}
</ul>

//...
~~~
<%= caption "client/templates/includes/header.html" %>
<%= highlight "3~5" %>

<%= commit "7-5", "Only show submit post link if logged in." %>

////

### Meteor Method: Better Abstraction and Security

////

- ////
- ////
- ////

////

- ////
- ////
- ////

////

////

////

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val()
    };
    
    Meteor.call('postInsert', post, function(error, result) {
      // display the error to the user and abort
      if (error)
        return alert(error.reason);
      
      Router.go('postPage', {_id: result._id});  
    });
  }
});
~~~
<%= caption "client/templates/posts/post_submit.js" %>
<%= highlight "10~16" %>

////

////

### Security Check

////

////  

//// 

//// 

~~~js
Posts = new Mongo.Collection('posts');

Meteor.methods({
  postInsert: function(postAttributes) {
    check(Meteor.userId(), String);
    check(postAttributes, {
      title: String,
      url: String
    });
    
    var user = Meteor.user();
    var post = _.extend(postAttributes, {
      userId: user._id, 
      author: user.username, 
      submitted: new Date()
    });
    
    var postId = Posts.insert(post);
    
    return {
      _id: postId
    };
  }
});
~~~
<%= caption "lib/collections/posts.js" %>
<%= highlight "3~24" %>

//// 

<%= commit "7-6", "Use a method to submit the post." %>

<% note do %>

### Bye Bye Allow/Deny

////

////

<% end %>

### Preventing Duplicates

////

~~~js
Meteor.methods({
  postInsert: function(postAttributes) {
    check(this.userId, String);
    check(postAttributes, {
      title: String,
      url: String
    });
    
    var postWithSameLink = Posts.findOne({url: postAttributes.url});
    if (postWithSameLink) {
      return {
        postExists: true,
        _id: postWithSameLink._id
      }
    }
    
    var user = Meteor.user();
    var post = _.extend(postAttributes, {
      userId: user._id, 
      author: user.username, 
      submitted: new Date()
    });
    
    var postId = Posts.insert(post);
    
    return {
      _id: postId
    };
  }
});
~~~
<%= caption "collections/posts.js" %>
<%= highlight "9~15" %>

////

//// 

////

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val()
    };
    
    Meteor.call('postInsert', post, function(error, result) {
      // display the error to the user and abort
      if (error)
        return alert(error.reason);
      
      // show this result but route anyway
      if (result.postExists)
        alert('This link has already been posted');
    
      Router.go('postPage', {_id: result._id});  
    });
  }
});
~~~
<%= caption "client/templates/posts/post_submit.js" %>
<%= highlight "15~17" %>

<%= commit "7-7", "Enforce post URL uniqueness." %>

### Sorting Posts

////

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find({}, {sort: {submitted: -1}});
  }
});
~~~
<%= caption "client/templates/posts/posts_list.js" %>
<%= highlight "3" %>

<%= commit "7-8", "Sort posts by submitted timestamp." %>

//// 

////
