---
title: แก้ไขข่าว
slug: editing-posts
date: 0008/01/01
number: 8
contents: เพิ่มฟอร์มแก้ไขข่าว|กำหนดสิทธิการแก้ไข|จำกัดฟิลด์ที่แก้ไขได้
paragraphs: 29
---

ตอนนี้เราก็สร้างข่าวใหม่ได้แล้ว ขั้นต่อไปคือ ทำให้แก้ไขและลบข่าวได้ โดยในส่วนของหน้าจอนั้นค่อนข้างง่าย และเวลานี้ก็เหมาะที่จะพูดถึงเรื่องที่ Meteor จัดการสิทธิการใช้งานของผู้ใช้

เริ่มแรกก็ผูกข้อมูลที่ตัวจัดการเส้นทางก่อน เราจะเพิ่มเส้นทางไปที่หน้าแก้ไขข่าว และกำหนดชุดข้อมูลให้มัน

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  notFoundTemplate: 'notFound',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.route('/', {name: 'postsList'});

Router.route('/posts/:_id', {
  name: 'postPage',
  data: function() { return Posts.findOne(this.params._id); }
});

Router.route('/posts/:_id/edit', {
  name: 'postEdit',
  data: function() { return Posts.findOne(this.params._id); }
});

Router.route('/submit', {name: 'postSubmit'});

var requireLogin = function() {
  if (! Meteor.user()) {
    if (Meteor.loggingIn()) {
      this.render(this.loadingTemplate);
    } else {
      this.render('accessDenied');
    }
  } else {
    this.next();
  }
}

Router.onBeforeAction('dataNotFound', {only: 'postPage'});
Router.onBeforeAction(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "15~18" %>

### เทมเพลตหน้าแก้ไขข่าว

ตอนนี้เรามาเน้นที่เทมเพลต โดยเทมเพลต `postEdit` ของเราก็จะเป็นฟอร์มแบบมาตรฐาน

~~~html
<template name="postEdit">
  <form class="main form">
    <div class="form-group">
      <label class="control-label" for="url">URL</label>
      <div class="controls">
          <input name="url" id="url" type="text" value="{{url}}" placeholder="Your URL" class="form-control"/>
      </div>
    </div>
    <div class="form-group">
      <label class="control-label" for="title">Title</label>
      <div class="controls">
          <input name="title" id="title" type="text" value="{{title}}" placeholder="Name your post" class="form-control"/>
      </div>
    </div>
    <input type="submit" value="Submit" class="btn btn-primary submit"/>
    <hr/>
    <a class="btn btn-danger delete" href="#">Delete post</a>
  </form>
</template>
~~~
<%= caption "client/templates/posts/post_edit.html" %>

และไฟล์ `post_edit.js` ที่ต้องใช้คู่กัน

~~~js
Template.postEdit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var currentPostId = this._id;
    
    var postProperties = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val()
    }
    
    Posts.update(currentPostId, {$set: postProperties}, function(error) {
      if (error) {
        // display the error to the user
        alert(error.reason);
      } else {
        Router.go('postPage', {_id: currentPostId});
      }
    });
  },
  
  'click .delete': function(e) {
    e.preventDefault();
    
    if (confirm("Delete this post?")) {
      var currentPostId = this._id;
      Posts.remove(currentPostId);
      Router.go('postsList');
    }
  }
});
~~~
<%= caption "client/templates/posts/post_edit.js" %>

ถึงตอนนี้ คุณก็คงคุ้นเคยกับโค้ดเกือบทั้งหมดแล้ว

เรามีฟังก์ชัน callback สองตัว ตัวแรกใช้กับเหตุการณ์ `submit` ของฟอร์ม และอีกตัวใช้เหตุการณ์ `click` ของลิงก์ delete 

ฟังก์ชัน callback ของการ delete นั้นง่ายมากๆ แค่ปิดการทำงานของการคลิ๊ก และยืนยันการทำงานกับผู้ใช้ ถ้าตอบตกลง ก็จะนำค่า ID ของข่าวปัจจุบันจากชุดข้อมูลของเทมเพลต มาใช้ลบข่าวนั้น และสุดท้ายก็ส่งผู้ใช้กลับไปที่หน้าโฮม

ส่วน callback ของการอัพเดทนั้นยาวกว่านิดนึง แต่ก็ไม่ได้ซับซ้อนมากกว่าเดิมเท่าไหร่ หลังจากที่ปิดการทำงานปกติและได้ข่าวมาแล้ว ก็จะดึงค่าฟิลด์จากหน้าเพจและเก็บไว้ในอ็อบเจกต์ `postProperties` 

จากนั้นก็ส่งอ็อบเจกต์นี้ไปให้เมธอด `Collection.update() ` ของ Meteor ด้วยตัวดำเนินการ `$set` (ที่จะเปลี่ยนค่าของฟิลด์เฉพาะบางตัวโดยไม่แตะต้องตัวอื่นๆ) และใช้ callback เพิ่อแสดงข้อความผิดพลาด หรือส่งผู้ใช้กลับไปที่หน้าข่าว ถ้าการอัพเดททำได้สำเร็จ

### Adding Links

เราควรเพิ่มลิงก์แก้ไขในหน้าข่าวด้วยเพื่อให้ผู้ใช้มีวิธีเข้าไปที่หน้าแก้ไข

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
      <p>
        submitted by {{author}}
        {{#if ownPost}}<a href="{{pathFor 'postEdit'}}">Edit</a>{{/if}}
      </p>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn btn-default">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/templates/posts/post_item.html" %>
<%= highlight "5~8" %>

และแน่นอนว่าเราไม่ต้องการให้คุณเห็นลิงก์แก้ไขที่ข่าวของคนอื่น เราก็ต้องใช้ตัวช่วย `ownPost` กับงานนี้

~~~js
Template.postItem.helpers({
  ownPost: function() {
    return this.userId === Meteor.userId();
  },
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  }
});
~~~
<%= caption "client/templates/posts/post_item.js" %>
<%= highlight "2~4" %>

<%= screenshot "8-1", "Post edit form." %>

<%= commit "8-1", "Added edit posts form." %>

หน้าฟอร์มแก้ไขข่าวของเราดูดีทีเดียว แต่ทว่าคุณก็ยังไม่สามารถแก้ไขอะไรในตอนนี้ได้ เกิดอะไรขึ้นกันแน่

### กำหนดสิทธิการใช้งาน

ตั้งแต่ตอนที่เราถอนแพ็คเกจ `insecure` ออกไป การแก้ไขที่ไคลเอนต์ก็จะถูกปฏิเสธทั้งหมด

เพื่อแก้ไขเรื่องนี้ เราจะกำหนดสิทธิการใช้งานขึ้นมาบางตัว เริ่มจากสร้างไฟล์ `permissions.js` ใน `lib` เพื่อให้แน่ใจว่าการกำหนดสิทธิเกิดขึ้นก่อน (และใช้ได้ทั้งสองฝั่ง)

~~~js
// check that the userId specified owns the documents
ownsDocument = function(userId, doc) {
  return doc && doc.userId === userId;
}
~~~
<%= caption "lib/permissions.js" %>

ในบท [การสร้างข่าว](http://0.0.0.0:8000/chapter/creating-posts) เราได้ลบเมธอด `allow()` ออกไปเพราะเรากำลังใช้วิธีเพิ่มข่าวใหม่ด้วยเมธอดของเซิร์ฟเวอร์ (ซึ่งข้ามการทำงานของ `allow()` อยู่แล้ว) 

แต่ตอนนี้เรากำลังแก้ไขและลบข่าวจากไคลเอนต์ ดังนั้นให้กลับไปที่ `posts.js` และเพิ่มบล็อก `allow()` เข้าไป

~~~js
Posts = new Mongo.Collection('posts');

Posts.allow({
  update: function(userId, post) { return ownsDocument(userId, post); },
  remove: function(userId, post) { return ownsDocument(userId, post); },
});

//...
~~~
<%= caption "lib/collections/posts.js" %>
<%= highlight "3~6" %>

<%= commit "8-2", "Added basic permission to check the post's owner." %>

### จำกัดการแก้ไข

เพียงเพราะเราสามารถแก้ไขข่าวของตัวเองได้ ไม่ได้หมายความว่า เราควรแก้ไข `ทุกๆ` ฟิลด์ ตัวอย่างเช่น เราไม่ต้องการให้ผู้ใช้สร้างข่าว และจากนั้นก็ส่งมันให้เป็นของคนอื่น

นั่นคือ เราจะใช้ callback `deny()` ของ Meteor เพื่อจำกัดฟิลด์ที่ผู้ใช้สามารถแก้ไขได้

~~~js
Posts = new Mongo.Collection('posts');

Posts.allow({
  update: function(userId, post) { return ownsDocument(userId, post); },
  remove: function(userId, post) { return ownsDocument(userId, post); },
});

Posts.deny({
  update: function(userId, post, fieldNames) {
    // may only edit the following two fields:
    return (_.without(fieldNames, 'url', 'title').length > 0);
  }
});

//...
~~~
<%= caption "lib/collections/posts.js" %>
<%= highlight "8~13" %>

<%= commit "8-3", "Only allow changing certain fields of posts." %>

เราใช้อาร์เรย์ `fieldNames` เพิ่อใส่รายชื่อฟิลด์ที่สามารถแก้ไขได้ และใช้เมธอด `without()` ของ [Underscore](http://underscorejs.org/) เพื่อคืนค่าอาร์เรย์ย่อยที่ประกอบด้วยฟิลด์ที่ *ไม่ใช่* `url` หรือ `title`

ถ้าทุกอย่างเป็นปกติ อาร์เรย์ตัวนั้นควรจะว่างและขนาดของมันควรเป็น 0 แต่ถ้ามีใครบางคนลองอะไรแปลกๆ ขนาดของอาร์เรย์อาจจะเป็น 1 หรือมากกว่าก็ได้ และทำให้ callback ส่งคืนค่า `true` (เท่ากับปฏิเสธการอัพเดท)

คุณอาจจะสังเกตุว่า ไม่มีตรงไหนในโค้ดการแก้ไขที่เราจะเช็คว่าลิงก์นั้นซ้ำหรือไม่ ซึี่งก็หมายความว่าผู้ใช้สามารถป้อนลิงก์เข้ามาและแก้ไข URL ของมันทีหลังเพื่อหลบการตรวจสอบได้ ซึ่งวิธีการแก้ไขเรื่องนี้ก็สามารถใช้เมธอดของ Meteor กับหน้าฟอร์มแก้ไขได้ แต่เราจะทิ้งเรื่องนี้ไว้เป็นแบบฝึกหัดให้ผู้อ่านแทน

<% note do %>

### เปรียบเทียบระหว่างการใช้เมธอด กับ การจัดการข้อมูลที่ไคลเอนต์

ในการสร้างข่าวนั้น เราเรียกใช้เมธอด `postInsert` ของ Meteor แต่ในขณะที่การแก้ไขและลบข่าว เราเรียกใช้ `update` และ `remove` โดยตรงที่ไคลเอนต์ โดยกำหนดสิทธิไว้ที่ `allow` และ `deny`

แล้วเมื่อไรที่เราจะเลือกใช้อย่างนึง และไม่ใช้อีกอย่าง

เมื่อสิ่งนั้นไม่ซับซ้อนอะไร และคุณสามารถกำหนดกฏง่ายๆที่จะ `allow` และ `deny` ได้ มันก็จะง่ายกว่าถ้าจะจัดการสิ่งนั้นที่ไคลเอนต์โดยตรง

แต่เมื่อไรก็ตาม ที่คุณจำเป็นต้องจัดการบางสิ่งนอกเหนือการควบคุมของผู้ใช้ (เช่น บันทึกเวลาของข่าวใหม่ หรือกำหนดค่าผู้ใช้ที่ถูกต้องให้มัน) มันก็จะดีกว่าถ้าจะใช้เมธอด

การเรียกใช้เมธอด จะเหมาะสมกว่ากับสถานการณ์ต่อไปนี้

- เมื่อคุณจำเป็นต้องรู้ หรือส่งคืนค่าผ่าน callback แทนที่จะคอยการทำงานแบบรีแอคทีฟและการซิงโครไนซ์ให้เกิดขึ้น
- ในฟังก์ชันที่ใช้งานฐานข้อมูลมาก จะเป็นการสิ้นเปลืองถ้าจะส่งคอลเลคชั่นขนาดใหญ่ข้ามไปข้ามมา
- ในการสรุปและรวบรวมข้อมูล (เข่น การนับ, ค่าเฉลี่ย, ผลรวม)

ถ้าต้องการคำอธิบายที่ละเอียดกว่านี้ [เข้าไปดูเพิ่มเติมได้จากในบล็อกของเรา](https://www.discovermeteor.com/blog/meteor-methods-client-side-operations/) 

<% end %>
