---
title: เทมเพลต
slug: templates
date: 0003/01/01
number: 3
contents: เรียนรู้วิธีใช้เทมเพลตด้วย Spacebars|สร้างเทมเพลตสามตัวแรกของคุณ|เข้าใจการทำงานของตัวจัดการใน Meteor|สร้างแอพต้นแบบที่ทำงานกับข้อมูลง่ายๆ
paragraphs: 46
---

เพื่อให้สร้างแอพได้ง่ายขึ้น เราจะใช้วิธีการแบบ outside-in โดยเริ่มจากการสร้างเปลือกนอกของแอพด้วยไฟล์ HTML และจาวาสคริปต์ก่อน จากนั้นก็เขียนโค้ดเพิ่มเข้าไป เพื่อให้มันทำงานได้

โดยในบทนี้ เราจะแก้ไขและสร้างไฟล์แค่ในโฟลเดอร์ `/client` เท่านั้น

ขั้นแรกให้คุณเปิดไฟล์ `main.html` ที่สร้างไว้แล้วในโฟลเดอร์ `/client` แล้วป้อนโค้ดต่อไปนี้ลงไป :

~~~html
<head>
  <title>Microscope</title>
</head>
<body>
  <div class="container">
    <header class="navbar">
      <div class="navbar-inner">
        <a class="brand" href="/">Microscope</a>
      </div>
    </header>
    <div id="main" class="row-fluid">
      {{> postsList}}
    </div>
  </div>
</body>
~~~
<%= caption "client/main.html" %>

เราจะใช้ไฟล์นี้เป็นเทมเพลตหลักของแอพ โค้ดที่คุณเห็นในไฟล์เกือบทั้งหมดเป็น HTML ยกเว้นตรงตำแหน่ง `{{> postList}}`  ที่ Meteor จะนำข้อมูลที่ได้จากเทมเพลต `postsList` แทรกเข้าไปแทน สิ่งที่เราต้องทำต่อก็คือสร้างเทมเพลทเพิ่มขึ้นอีกสองสามตัว

### เทมเพลทของ Meteor

หลักๆ แล้ว เว็บข่าวสังคมก็จะมีข่าวต่างๆ แสดงไล่เรียงกันลงมาเป็นรายการ ในรูปแบบลิสต์ ที่เราจะนำมาใช้ในเทมเพลทของเรานั่นเอง

เริ่มกันต่อโดยการสร้างโฟลเดอร์ `/templates` ข้างใน `/client` ไว้เก็บเทมเพลททั้งหมด และสร้างโฟลเดอร์ย่อย `/posts` ไว้ใน `/templates` อีกชั้น เพื่อแยกเก็บเทมเพลทต่างๆเกี่ยวกับโพสท์

<% note do %>

### การค้นหาไฟล์

Meteor เก่งในเรื่องการค้นหาไฟล์ ไม่ว่าคุณจะสร้างไฟล์ไว้ที่ไหนในโฟลเดอร์ `/client` มันก็จะค้นหาจนเจอและจัดการคอมไพล์ได้อย่างถูกต้อง สิ่งที่เราได้คือเราไม่ต้องคอยผูกไฟล์เข้าไปในแอพอยู่ตลอดไม่ว่าจะเป็นไฟล์จาวาสคริปต์หรือสไตล์ชีต (CSS)

ยิ่งกว่านั้น คุณยังสามารถเลือกที่จะแยกโค้ดออกเป็นหลายไฟล์ในโฟลเดอร์เดียว หรือรวมโค้ดทั้งหมดไว้ในไฟล์เดียวกันก็ได้ ซึ่งไม่ว่าจะทำแบบไหน Meteor ก็จะคอมไพล์ทุกไฟล์ที่พบให้เป็นไฟล์แบบย่อไว้ใช้งานเพียงไฟล์เดียว แต่เพื่อความสะดวกในการจัดการเราก็จะแยกไฟล์ตามโฟลเดอร์ในแบบที่เราทำมาแล้วต่อไป

<% end %>

ตอนนี้เราก็พร้อมจะสร้างเทมเพลทที่สองแล้ว ให้คุณสร้าง `posts_list.html` ในโฟลเดอร์ `client/templates/posts` ด้วยโค้ดต่อไปนี้ 

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>

แล้วสร้าง `post_item.html` อีกตัวตามนี้

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html" %>

ให้สังเกตุตรงแอททริบิวท์ `name="postsList"` ในแท็ก `<template` ซึ่ง เป็นชื่อที่ Meteor ใช้เพื่อเชื่อมโยงเทมเพลทต่างๆเข้าด้วยกัน (โดยไม่สนใจชื่อไฟล์)

ตอนนี้ก็ถึงเวลาที่เราจะมารู้จักกับระบบเทมเพลทของ Meteor ที่เรียกว่า **Spacebars** ซึ่งจริงๆแล้วก็คือ HTML ที่มีส่วนขยายเพิ่มสามส่วน ได้แก่ *ตัวแทนที่ (inclusions)* หรือที่เรียกว่า "partials", *นิพจน์ (expressions)* และ *บล็อกตัวช่วย (block helpers)* 

*ตัวแทนที่* มีรูปแบบเป็น `{{> templateName}}` ทำหน้าที่บอกให้ Meteor นำเทมเพลทตามชื่อที่ระบุมาแทนที่ตรง inclusion (ในโค้ดของเราคือ `postItem`)

*นิพจน์* เช่น `{{title}}` เป็นได้ทั้งค่าคุณสมบัติของอ็อบเจกต์ หรือเป็นค่าที่ได้จากตัวช่วยเทมเพลท ที่สร้างไว้ในตัวจัดการเทมเพลท ดังจะได้อธิบายในลำดับต่อไป

*บล็อกตัวช่วย* เป็นแท็กพิเศษที่ใช้ควบคุมลำดับการทำงานของเทมเพลท เช่น `{{#each}}...{{/each}}` หรือ `{{#if}}...{{/if}}`

<% note do %>

### ต้องการข้อมูลเพิ่มเติม

คุณสามารถค้นหาข้อมูลเพิ่มเติมเกี่ยวกับ Spacebars ได้ที่ [หน้าคู่มือการใช้งาน Spacebars](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md)

<% end %>

รู้มาถึงตรงนี้ เราก็พอที่จะทำความเข้าใจกับการทำงานที่เกิดขึ้นได้

ในเทมเพลท `postsList` สิ่งที่เกิดขึ้นก็คือ บล็อกตัวช่วย `{{#each}}..{{/each}}` จะทำให้เกิดการทำซ้ำเป็นจำนวนครั้งเท่ากับจำนวนข้อมูลที่มีในอ็อบเจกต์ `posts` โดยเนื้อหาเดิมในบล็อกจะถูกแทนที่ด้วยข้อมูลจากเทมเพลท `postItem` ทุกครั้ง

แล้วอ็อบเจกต์ `posts` ได้มาจากไหน คำตอบคือ ได้มาจากตัวช่วยเทมเพลท ซึ่งทำหน้าที่คล้ายกับถังข้อมูลที่เตรียมไว้ให้เทมเพลทเรียกใช้

ส่วนในเทมเพลท `postItem` ก็ไม่มีอะไรซับซ้อน มันใช้แค่ 3 นิพจน์ คือ `{{url}}` และ `{{title}}` ที่ดึงค่ามาจากเรื่องที่โพสท์ และ `{{domain}}` ที่ได้ค่ามาจากตัวช่วยเทมเพลท 

### Template Managers

////

////

////

<% note do %>

### Managers?

////

////

////

<% end %>

////

~~~js
var postsData = [
  {
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  },
  {
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  },
  {
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  }
];
Template.postsList.helpers({
  posts: postsData
});
~~~
<%= caption "client/views/posts/posts_list.js" %>

////

<%= screenshot "3-1", "Our first templates with static data" %>

<%= commit "3-1", "Added basic posts list template and static data." %>

////

////

////

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>

////

### The Value of "this"

////

~~~js
Template.postItem.helpers({
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  }
});
~~~
<%= caption "client/views/posts/post_item.js" %>

<%= commit "3-2", "Setup a `domain` helper on the `postItem`." %>

////

<%= screenshot "3-2", "Displaying domains for each links." %>

////

////

////

////

<% note do %>

### JavaScript Magic

////

////

////

<% end %>

////

<% note do %>

### Hot Code Reload

////

////

////

<% end %>
