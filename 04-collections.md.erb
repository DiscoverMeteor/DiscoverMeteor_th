---
title: คอลเลคชั่น
slug: collections
date: 0004/01/01
number: 4
contents: รู้จักคุณสมบัติเรียลไทม์คอลเลคชั่นของ Meteor|เข้าใจวิธีการซิงโครไนซ์ข้อมูลของ Meteor|ใช้คอลเลคชั่นกับเทมเพลทของเรา|เปลี่ยนแอพเราให้ทำงานแบบเรียลไทม์!
paragraphs: 72
---

ในบทที่ 1 เราได้เกริ่นถึงคุณสมบัติหนึ่งของ Meteor เรื่องการซิงโครไนซ์ข้อมูลอัตโนมัติระหว่างไคลเอนต์และเซิร์ฟเวอร์กันไปบ้างแล้ว

ตอนนี้ก็ถึงเวลาที่จะเข้าไปดูในรายละเอียดว่ามันทำงานอย่างไร และทำความเข้าใจการทำงานของ **คอลเลคชั่น** ใน Meteor ซึ่ีงเป็นเทคโนโลยีหลักที่ช่วยให้การทำงานนี้เกิดขึ้นได้ 

คอลเลคชั่นเป็นโครงสร้างข้อมูลแบบพิเศษที่ช่วยเราจัดเก็บข้อมูลลงฐานข้อมูล MongoDB บนเซิร์ฟเวอร์ และช่วยซิงโครไนซ์ข้อมูลแบบเรียลไทม์ระหว่างเซิร์ฟเวอร์กับเบราว์เซอร์ของผู้ใช้แต่ละคนที่เชื่อมต่อเข้ามา

สิ่งที่เราต้องการก็คือ จัดเก็บโพสท์ข่าวลงฐานข้อมูล และแชร์การใช้งานระหว่างผู้ใช้ภายในแอพ ดังนั้นเราจึงเริ่มต้นด้วยการสร้างคอลเลคชั่นชื่อ `Posts` ขึ้นเพื่อใช้เก็บข้อมูลนี้

เนื่องจากเรามักใช้คอลเลคชั่นเป็นศูนย์กลางของแอพ ดังนั้นเราก็ควรวางคอลเลคชั่นไว้ในโฟลเดอร์ `lib` เพื่อให้แน่ใจว่ามันถูกสร้างขึ้นตอนที่แอพเริ่มทำงานเสมอ โดยในแอพของเรานั้น ให้คุณสร้างโฟลเดอร์ย่อย `collections/` ใน `lib` และสร้างไฟล์ `posts.js` ไว้ข้างใน ด้วยโค้ดต่อไปนี้ :

~~~js
Posts = new Meteor.Collection('posts');
~~~
<%= caption "lib/collections/posts.js" %>

<%= commit "4-1", "Added a posts collection" %>

<% note do %>

### ใช้ Var หรือไม่ใช้ Var กันแน่

ใน Meteor นั้น คำสั่ง `var` จะจำกัดการใช้งานของอ็อบเจกต์ไว้เฉพาะในไฟล์ทีี่เรียกใช้เท่านั้น ด้วยเหตุนี้เราจึงสร้างคอลเลคชั่น `Posts` โดยไม่มีคำสั่ง `var` นำหน้า เพื่อให้เราเรียกใช้มันได้จากทุกๆ ที่ในแอพนั่นเอง

<% end %>

### การเก็บข้อมูล

เว็บแอพมีวิธีจัดเก็บข้อมูลพื้นฐานอยู่ 3 รูปแบบ ดังนี้

- **เก็บในหน่วยความจำเบราว์เซอร์ :** ข้อมูลที่เก็บไว้ในหน่วยความจำเบราว์เซอร์อย่างเช่น ตัวแปรจาวาสคริปต์ จะใช้งานได้เฉพาะในแท็บที่จาวาสคริปต์นั้นทำงานอยู่ ไม่ได้ถูกเก็บอย่างถาวร และจะสูญหายไปเมื่อคุณปิดแท็บนั้น

- **เก็บในที่เก็บข้อมูลของเบราว์เซอร์ :** เบราว์เซอร์นั้นสามารถที่จะเก็บข้อมูลให้นานขึ้นได้ด้วยการใช้คุกกี้ หรือที่เก็บข้อมูลส่วนตัว ([Local Storage](http://diveintohtml5.info/storage.html)) แม้ว่าข้อมูลที่เก็บไว้นี้จะคงอยู่ในทุกๆ session ของเบราว์เซอร์ มันก็เข้าถึงได้จากผู้ใช้ปัจจุบันเท่านั้น (จากทุกๆ แท็บที่เปิดใช้)  และก็ไม่ง่ายที่จะแชร์ข้อมูลนี้ให้ผู้ใช้คนอื่น

- **เก็บลงฐานข้อมูลบนเซิร์ฟเวอร์ :** การเก็บลงฐานข้อมูลเป็นทางเลือกที่ดีที่สุด ถ้าคุณต้องการจัดเก็บข้อมูลแบบถาวร และให้ผู้ใช้หลายคนเข้าถึงข้อมูลได้ (ใน Meteor จะใช้ฐานข้อมูล MongoDB เป็นทางเลือกหลัก)

Meteor นั้นใช้การเก็บข้อมูลทั้ง 3 แบบ และในบางครั้งยังทำการซิงโครไนซ์ข้อมูลจากที่หนึ่งไปอีกที่หนึ่งให้ด้วย (เดี๋ยวเราจะได้ดูตัวอย่างกัน) แต่ด้วยข้อดีของฐานข้อมูลตามที่กล่าวมา เราจึงมักใช้ฐานข้อมูลเป็นที่เก็บข้อมูลหลักของระบบกันโดยทั่วไป

### ไคลเอนต์และเซิร์ฟเวอร์

โค้ดที่อยู่นอกโฟลเดอร์ `client` และ `server` จะทำงานทั้งในฝั่งไคลเอนต์และฝั่งเซิร์ฟเวอร์ ดังนั้นคอลเลคชั่น `Posts` จึงถูกเรียกใช้งานได้จากทั้งสองฝั่ง ซึ่งการทำงานของคอลเลคชั่นในแต่ละฝั่งนั้น ก็อาจจะมีความแตกต่างกันออกไป

ในฝั่งเซิร์ฟเวอร์ หน้าที่ของคอลเลคชั่นคือ ติดต่อกับฐานข้อมูล MongoDB อ่านและเขียนข้อมูลที่มีการเปลี่ยนแปลง หรือเปรียบได้กับไลบรารีของระบบฐานข้อมูลทั่วไปนั่นเอง

ส่วนในฝั่งไคลเอนต์ คอลเลคชั่นก็คือสำเนาชุดข้อมูลย่อยของฐานข้อมูลหลัก โดยข้อมูลในคอลเลคชั่นที่ไคลเอนต์จะถูกปรับปรุงให้ตรงกับชุดข้อมูลย่อยนั้นอยู่เสมอ หรือเกือบตลอดเวลา

<% note do %>

### คอนโซล กับ คอนโซล กับ คอนโซล

ในบทนี้ เราจะเริ่มใช้ **คอนโซลของเบราว์เซอร์** ซึ่งเป็นคนละตัวกับ **โปรแกรมเทอร์มินอล** หรือ **โปรแกรมเชลล์ของ Mongo** โดยเราได้ทำสรุปย่อของแต่ละตัวไว้แล้วดังนี้

#### **โปรแกรมเทอร์มินอล**

<%= screenshot "terminal", "The Terminal" %>

- เรียกใช้ได้จากระบบปฏิบัติการ
- **โค้ดที่เซิร์ฟเวอร์** เมื่อใช้คำสั่ง `console.log()` จะแสดงผลออกที่นี่
- พร้อมท์คำสั่ง : `$`
- รู้จักกันในชื่อ : โปรแกรมเชลล์ แบชเชลล์ (Bash) 

#### **คอนโซลของเบราว์เซอร์**

<%= screenshot "browser-console", "The Browser Console" %>

- เรียกใช้ได้จากในเบราว์เซอร์ รันคำสั่งจาวาสคริปต์ได้
- **โค้ดที่ไคลเอนต์** เมื่อใช้คำสั่ง `console.log()` จะแสดงผลออกที่นี่
- พร้อมท์คำสั่ง : `❯`
- รู้จักกันในชื่อ : คอนโซลจาวาสคริปต์ คอนโซลนักพัฒนา (DevTools Console) 

#### **โปรแกรมเชลล์ของ Mongo**

<%= screenshot "mongo-shell", "The Mongo Shell" %>

- เรียกใช้ได้จากโปรแกรมเทอร์มินอล ด้วยคำสั่ง `meteor mongo`
- ช่วยให้คุณเข้าถึงฐานข้อมูลของแอพคุณโดยตรง
- พร้อมท์คำสั่ง : `>`
- รู้จักกันในชื่อ : คอนโซล Mongo

จำไว้ว่า คุณไม่จำเป็นต้องป้อนอักษรพร้อมท์ (`$`, `❯`, or `>`) รวมไปกับคำสั่ง และบรรทัดที่ไม่มีพร้อมท์คำสั่งนำหน้า ก็เป็นการแสดงผลลัพธ์ที่ได้จากคำสั่งก่อนหน้านั้น

<% end %>

### คอลเลคชั่นที่เซิร์ฟเวอร์

ย้อนกลับไปตรงที่เราบอกว่า คอลเลคชั่นที่เซิร์ฟเวอร์ทำหน้าที่เหมือนกับ API ของฐานข้อมูล Mongo นั่นก็คือในโค้ดฝั่งเซิร์ฟเวอร์นั้น คุณสามารถที่จะเขียนคำสั่ง เช่น `Posts.insert()` หรือ `Posts.update()` เพื่อทำการแก้ไขเปลี่ยนแปลงคอลเลคชั่น `posts` ที่เก็บไว้ใน Mongo ได้โดยตรง

เพื่อให้คุณเห็นข้อมูลในตัว Mongo ให้คุณเปิดโปรแกรมเทอร์มินอลขึ้นอีกตัว (พร้อมๆ กับตัวแรกที่คุณเปิดและรันคำสั่ง `meteor` ไว้แล้ว) แล้วไปที่โฟลเดอร์ของแอพคุณ จากนั้นให้รันคำสั่ง `meteor mongo` เพื่อเรียกใช้งานโปรแกรมเชลล์ของ Mongo ซึ่งคุณสามารถป้อนคำสั่งของ Mongo ได้ (คุณสามารถออกจากโปรแกรมด้วยปุ่ม `ctrl+c`) เช่น ลองเพิ่มโพสท์ข่าวเข้าไปใหม่ ด้วยคำสั่งนี้ 

~~~bash
> db.posts.insert({title: "A new post"});

> db.posts.find();
{ "_id": ObjectId(".."), "title" : "A new post"};
~~~
<%= caption "The Mongo Shell" %>

<% note do %>

### เรียกใช้ Mongo จาก Meteor.com

คุณควรรู้ว่า หลังจากที่คุณส่งแอพคุณขึ้นไปรันที่ *.meteor.com แล้ว คุณยังสามารถเรียกใช้โปรแกรมเชลล์ของ Mongo เพื่อเข้าถึงฐานข้อมูลของแอพคุณที่รันอยู่ได้ ด้วยคำสั่ง `meteor mongo myApp` 

และคุณก็ยังสามารถเรียกดูล็อกของแอพคุณได้ ด้วยคำสั่ง `meteor logs myApp`

<% end %>

รูปแบบคำสั่งของ Mongo นั้นดูคุ้นเคยดี เพราะเป็นจาวาสคริปต์ โดยเราคงไม่ใช้โปรแกรมเชลล์ของ Mongo ทำอะไรกับข้อมูลไปมากกว่านี้ เราเพียงแค่ใช้มันตรวจดูข้อมูลบ้างเพื่อให้แน่ใจว่ามันเป็นไปอย่างที่เราคิดไว้

### Client-Side Collections

////

////

////

<% note do %>

### Introducing MiniMongo

////

<% end %>

### Client-Server Communication

////

////

////

////

~~~bash
> db.posts.find();
{title: "A new post", _id: ObjectId("..")};
~~~
<%= caption "The Mongo Shell" %>

~~~js
❯ Posts.findOne();
{title: "A new post", _id: LocalCollection._ObjectID};
~~~
<%= caption "First browser console" %>

////

~~~js
❯ Posts.find().count();
1
❯ Posts.insert({title: "A second post"});
'xxx'
❯ Posts.find().count();
2
~~~
<%= caption "First browser console" %>

////

~~~bash
❯ db.posts.find();
{title: "A new post", _id: ObjectId("..")};
{title: "A second post", _id: 'yyy'};
~~~
<%= caption "The Mongo Shell" %>

////

////

~~~js
❯ Posts.find().count();
2
~~~
<%= caption "Second browser console" %>

////

////

////

### Populating the Database

////

////

////

////

~~~bash
$ meteor reset
~~~

////

////

~~~bash
meteor
~~~

////

~~~js
if (Posts.find().count() === 0) {
  Posts.insert({
    title: 'Introducing Telescope',
    url: 'http://sachagreif.com/introducing-telescope/'
  });
  
  Posts.insert({
    title: 'Meteor',
    url: 'http://meteor.com'
  });
  
  Posts.insert({
    title: 'The Meteor Book',
    url: 'http://themeteorbook.com'
  });
}
~~~
<%= caption "server/fixtures.js" %>

<%= commit "4-2", "Added data to the posts collection." %>

////

////

### Dynamic Data

////

~~~js
❯ Posts.find().fetch();
~~~
<%= caption "Browser console" %>

////

////

////

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
~~~
<%= caption "client/views/posts/posts_list.js" %>
<%= highlight "2~4" %>

<%= commit "4-3", "Wired collection into `postsList` template." %>

<% note do %>

### Find & Fetch

////

////

<% end %>

////

<%= screenshot "4-3", "Using live data" %>

////

////

~~~js
❯ Posts.insert({
  title: 'Meteor Docs',
  author: 'Tom Coleman',
  url: 'http://docs.meteor.com'
});
~~~
<%= caption "Browser console" %>

////

<%= screenshot "4-4", "Adding posts via the console" %>

////

<% note do %>

### Inspecting DOM Changes

////

////

<% end %>

### Connecting Collections: Publications and Subscriptions

////

////

~~~bash
$ meteor remove autopublish
~~~

////

////

////

~~~js
Meteor.publish('posts', function() {
  return Posts.find();
});
~~~
<%= caption "server/publications.js" %>

////

~~~js
Meteor.subscribe('posts');
~~~
<%= caption "client/main.js" %>

<%= commit "4-4", "Removed `autopublish` and set up a basic publication." %>

////

### Conclusion

////
