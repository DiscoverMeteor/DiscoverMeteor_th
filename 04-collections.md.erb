---
title: คอลเลคชั่น
slug: collections
date: 0004/01/01
number: 4
contents: รู้จักคุณสมบัติเรียลไทม์คอลเลคชั่นของ Meteor|เข้าใจวิธีการซิงโครไนซ์ข้อมูลของ Meteor|ใช้คอลเลคชั่นกับเทมเพลทของเรา|เปลี่ยนแอพเราให้ทำงานได้แบบเรียลไทม์!
paragraphs: 72
---

ในบทที่ 1 เราได้เกริ่นเรื่องคุณสมบัติหนึ่งของ Meteor เรื่องการซิงโครไนซ์ข้อมูลอัตโนมัติระหว่างไคลเอนต์และเซิร์ฟเวอร์ไปบ้างแล้ว

ตอนนี้ก็ถึงเวลาที่จะเข้าไปดูในรายละเอียดว่ามันทำงานอย่างไร และทำความเข้าใจกับการทำงานของ **คอลเลคชั่น** ใน Meteor ซึ่ีงเป็นเทคโนโลยีหลักที่ช่วยให้การทำงานนี้เกิดขึ้นได้ 

คอลเลคชั่นเป็นโครงสร้างข้อมูลแบบพิเศษที่ช่วยเราจัดเก็บข้อมูลลงฐานข้อมูลถาวร MongoDB บนเซิร์ฟเวอร์ และช่วยซิงโครไนซ์ข้อมูลแบบเรียลไทม์กับเบราว์เซอร์ที่ผู้ใช้แต่ละคนเชื่อมต่อเข้ามา

ถ้าเราต้องการจัดเก็บกระทู้ข่าว (หรือ Posts) ลงฐานข้อมูลและให้ผู้ใช้เรียกมาใช้งานได้ เราก็ต้องเริ่มด้วยการสร้างคอลเลคชั่นชื่อ `Posts` เพื่อเอาไว้เก็บข้อมูลเหล่านี้

การใช้คอลเลคชั่นกับแอพเป็นเรื่องที่เรามักทำกันอยู่เสมอ ดังนั้นเพื่อให้มั่นใจว่ามันถูกสร้างขึ้นตอนแอพเริ่มทำงาน เราก็จะสร้างมันไว้ในโฟลเดอร์ `lib` โดยเราจะสร้างโฟลเดอร์ `collection` ใน `lib` และสร้าง `posts.js` ไว้ข้างในอีกที ด้วยโค้ดต่อไปนี้ :

~~~js
Posts = new Meteor.Collection('posts');
~~~
<%= caption "lib/collections/posts.js" %>

<%= commit "4-1", "Added a posts collection" %>

<% note do %>

### To Var Or Not To Var?

////

<% end %>

### Storing Data

////

- ////
- ////
- ////

////

### Client & Server

////

////

////

<% note do %>

### Console vs Console vs Console

////

#### Terminal

<%= screenshot "terminal", "The Terminal" %>

- ////
- ////
- ////
- ////

#### Browser Console

<%= screenshot "browser-console", "The Browser Console" %>

- ////
- ////
- ////
- ////

#### Mongo Shell

<%= screenshot "mongo-shell", "The Mongo Shell" %>

- ////
- ////
- ////
- ////

////

<% end %>

### Server-Side Collections

////

////

~~~bash
> db.posts.insert({title: "A new post"});

> db.posts.find();
{ "_id": ObjectId(".."), "title" : "A new post"};
~~~
<%= caption "The Mongo Shell" %>

<% note do %>

### Mongo on Meteor.com

////

////

<% end %>

////

### Client-Side Collections

////

////

////

<% note do %>

### Introducing MiniMongo

////

<% end %>

### Client-Server Communication

////

////

////

////

~~~bash
> db.posts.find();
{title: "A new post", _id: ObjectId("..")};
~~~
<%= caption "The Mongo Shell" %>

~~~js
❯ Posts.findOne();
{title: "A new post", _id: LocalCollection._ObjectID};
~~~
<%= caption "First browser console" %>

////

~~~js
❯ Posts.find().count();
1
❯ Posts.insert({title: "A second post"});
'xxx'
❯ Posts.find().count();
2
~~~
<%= caption "First browser console" %>

////

~~~bash
❯ db.posts.find();
{title: "A new post", _id: ObjectId("..")};
{title: "A second post", _id: 'yyy'};
~~~
<%= caption "The Mongo Shell" %>

////

////

~~~js
❯ Posts.find().count();
2
~~~
<%= caption "Second browser console" %>

////

////

////

### Populating the Database

////

////

////

////

~~~bash
$ meteor reset
~~~

////

////

~~~bash
meteor
~~~

////

~~~js
if (Posts.find().count() === 0) {
  Posts.insert({
    title: 'Introducing Telescope',
    url: 'http://sachagreif.com/introducing-telescope/'
  });
  
  Posts.insert({
    title: 'Meteor',
    url: 'http://meteor.com'
  });
  
  Posts.insert({
    title: 'The Meteor Book',
    url: 'http://themeteorbook.com'
  });
}
~~~
<%= caption "server/fixtures.js" %>

<%= commit "4-2", "Added data to the posts collection." %>

////

////

### Dynamic Data

////

~~~js
❯ Posts.find().fetch();
~~~
<%= caption "Browser console" %>

////

////

////

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
~~~
<%= caption "client/views/posts/posts_list.js" %>
<%= highlight "2~4" %>

<%= commit "4-3", "Wired collection into `postsList` template." %>

<% note do %>

### Find & Fetch

////

////

<% end %>

////

<%= screenshot "4-3", "Using live data" %>

////

////

~~~js
❯ Posts.insert({
  title: 'Meteor Docs',
  author: 'Tom Coleman',
  url: 'http://docs.meteor.com'
});
~~~
<%= caption "Browser console" %>

////

<%= screenshot "4-4", "Adding posts via the console" %>

////

<% note do %>

### Inspecting DOM Changes

////

////

<% end %>

### Connecting Collections: Publications and Subscriptions

////

////

~~~bash
$ meteor remove autopublish
~~~

////

////

////

~~~js
Meteor.publish('posts', function() {
  return Posts.find();
});
~~~
<%= caption "server/publications.js" %>

////

~~~js
Meteor.subscribe('posts');
~~~
<%= caption "client/main.js" %>

<%= commit "4-4", "Removed `autopublish` and set up a basic publication." %>

////

### Conclusion

////
