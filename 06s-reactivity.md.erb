---
title: การทำงานแบบรีแอคทีฟ
slug: reactivity
date: 0006/01/02
number: 6.5
sidebar: true
contents: เรียนรู้การทำงานแบบรีแอคทีฟของ Meteor|เข้าใจว่าทำไมต้องใช้วิธี declarative|รู้วิธีเขียนโค้ดที่ใช้ข้อมูลชนิดรีแอคทีฟ
paragraphs: 20
---

ถ้าคอลเลคชั่นเป็นแกนคุณสมบัติหลักของ Meteor แล้ว *การทำงานแบบรีแอคทีฟ (reactivity)* ก็คือ เปลือกหุ้มที่ทำให้แกนนั้นใช้ประโยชน์ได้นั่นเอง

คอลเลคชั่นได้เปลี่ยนแปลงวิธีการทำงานของแอปพลิเคชันเมื่อมีการแก้ไขข้อมูลไปอย่างสิ้นเชิง มันไม่ใช่แค่วิธีการตรวจสอบการเปลี่ยนแปลงข้อมูล (เช่น ด้วยการเรียกใช้ AJAX) และปรับแก้ไขหน้า HTML เท่านั้น แต่ Meteor ทำให้เมื่อใดก็ตามที่ข้อมูลมีการเปลี่ยนแปลงหน้าจอการใช้งานของคุณก็จะปรับเปลี่ยนตามไปด้วยอย่างต่อเนื่อง

ลองหยุดคิดกันซักนิดจะพบว่า เบื้องหลังการทำงานนั้น Meteor สามารถที่จะเปลี่ยนแปลง *ส่วนหนึ่งส่วนใด* ของหน้าจอเมื่อมีการเปลี่ยนแปลงของคอลเลคชั่นเกิดขึ้นได้

โดยถ้าเรา *ใช้วิธีการเขียนโค้ด (imperative)* ให้ทำงานแบบนี้ เราก็ต้องใช้ฟังก์ชัน `.observe()` ของเคอร์เซอร์เรียกใช้ฟังก์ชัน callback เมื่อเอกสารที่ตรงกับเคอร์เซอร์นั้นมีการเปลี่ยนแปลง จากนั้นเราก็แก้ไขข้อมูลกับ DOM (ส่วนของ HTML ที่ถูกสร้างขึ้นในหน้าเว็บเรา) ผ่านฟังก์ชัน callback เหล่านั้น ซึ่งโค้ดที่ได้ก็จะดูคล้ายๆแบบนี้

~~~js
Posts.find().observe({
  added: function(post) {
    // when 'added' callback fires, add HTML element
    $('ul').append('<li id="' + post._id + '">' + post.title + '</li>');
  },
  changed: function(post) {
    // when 'changed' callback fires, modify HTML element's text
    $('ul li#' + post._id).text(post.title);
  },
  removed: function(post) {
    // when 'removed' callback fires, remove HTML element
    $('ul li#' + post._id).remove();
  }
});
~~~

คุณก็พอจะมองออกได้ว่าโค้ดที่ใช้จะซับซ้อนขึ้นอย่างรวดเร็วแค่ไหน ลองคิดดูว่าถ้าต้องเปลี่ยนค่าแต่ละ *ฟิลด์* ของข่าว และยังต้องปรับแก้ไข HTML ที่ซับซ้อนในแท็ก `<li>` ของข่าวนั้นด้วย นี่ยังไม่ได้พูดถึงในกรณีที่มันซับซ้อนสุดๆ เมื่อเราเริ่มผูกแหล่งข้อมูลหลายๆตัวที่เปลี่ยนแปลงค่าได้แบบเรียลไทม์เลยนะ

<% note do %>

### เรา *ควร* ใช้ `observe()` ตอนไหน

การใช้รูปแบบการโค้ดข้างบนนั้นบางทีก็จำเป็น โดยเฉพาะเมื่อต้องเกี่ยวข้องกับโค้ดจากที่อื่น (third-party widgets) ตัวอย่างเช่น ถ้าเราต้องการปักหรือถอนหมุดบนแผนที่แบบเรียลไทม์ด้วยข้อมูลจากคอลเลคชั่น (เพื่อแสดงตำแหน่งที่ผู้ใช้ล็อกอินเข้ามา)

ในกรณีนี้ เราจำเป็นต้องใช้ `observe()` เพื่อทำให้แผนที่ "คุย" กับคอลเลคชั่นใน Meteor ได้ และรู้ว่าจะทำอย่างไรเมื่อข้อมูลเปลี่ยนไป เช่น คุณอาจจะใช้ฟังก์ชัน callback `added` และ `removed` เพื่อเรียกเมธอด `dropPin()` หรือ `removePin()` จาก API ของแผนที่

<% end %>

### วิธีการแบบ Declarative

Meteor มีวิธีการที่ดีกว่านั้นให้เราก็คือ การทำงานแบบรีแอคทีฟ ซึ่งแกนหลักของมันก็คือ วิธีการแบบ **declarative** โดยวิธีนี้จะให้เรากำหนดความสัมพันธ์ระหว่างวัตถุในครั้งแรก และเราแค่รู้ว่าพวกมันจะมีค่าสอดคล้องกันอยู่เสมอ แทนที่จะต้องกำหนดว่าจะต้องทำอะไรเมื่อมีการเปลี่ยนแปลงเกิดขึ้น

วิธีการนี้เป็นแนวคิดที่ทรงพลัง เพราะว่าระบบงานแบบเรียลไทม์จะมีข้อมูลเข้ามามากมายที่เปลี่ยนแปลงค่าได้ตลอดไม่จำกัดเวลา โดยการประกาศว่า เราจะสร้าง HTML จากแหล่งข้อมูลชนิดรีแอกทีฟตัวไหนก็ได้ที่เราสนใจ Meteor ก็จะจัดการติดตามแหล่งข้อมูลพวกนั้น และทำงานยุ่งๆที่เหลือเพื่อปรับเปลี่ยนหน้าจอการใช้งานให้ทันสมัยอยู่เสมอ

ทั้งหมดนี้ก็เพื่อจะบอกว่า แทนที่จะคิดถึงการใช้งาน `observe` แต่ Meteor ให้เราเขียนแค่นี้ 

~~~html
<template name="postsList">
  <ul>
    {{#each posts}}
      <li>{{title}}</li>
    {{/each}}
  </ul>
</template>
~~~

และดึงข้อมูลข่าวออกมาด้วยโค้ด

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
~~~

สิ่งที่เกิดขึ้นเบื้องหลังก็คือ Meteor จะทำหน้าที่เชื่อมฟังก์ชัน callback ต่างๆใน `observe()` ให้เรา และจัดการวาดส่วนต่างๆของ HTML เมื่อข้อมูลรีแอกทีฟมีการเปลี่ยนแปลง

### ส่วนประมวลผล

แม้ว่า Meteor จะเป็นเฟรมเวิร์กแบบเรียลไทม์และรีแอกทีฟ แต่ก็ไม่ใช่ทั้งหมดในแอพ Meteor ที่ทำงานแบบรีแอกทีฟ เพราะถ้าเป็นแบบนั้น ทุกส่วนในแอพของคุณก็จะต้องทำงานใหม่ทุกครั้งที่มีบางอย่างเปลี่ยนแปลง การทำงานแบบรีแอกทีฟจึงถูกจำกัดให้อยู่ในพื้นที่เฉพาะของโค้ดคุณ และเราเรียกพื้นที่นี้ว่า **ส่วนประมวลผล (computations)**

ในอีกความหมายหนึ่ง ส่วนประมวลผล ก็คือ บล็อกของโค้ดซึ่งทำงานทุกๆครั้งเมื่อแหล่งข้อมูลชนิดรีแอกทีฟที่ผูกกันอยู่มีการเปลี่ยนแปลง ถ้าคุณมีแหล่งข้อมูลชนิดรีแอกทีฟ (เช่น ตัวแปรเซสชัน) และอยากให้มีการตอบสนองแบบรีแอกทีฟจากมัน คุณก็จำเป็นต้องสร้างส่วนประมวลผลให้ 

จำไว้ว่าปกติคุณไม่จำเป็นต้องทำแบบนี้ เพราะ Meteor กำหนดให้เทมเพลตและตัวช่วยมีส่วนประมวลผลพิเศษของตัวเองอยู่แล้ว (ความหมายคือ คุณมั่นใจได้เลยว่าเทมเพลตของคุณจะตอบสนองแบบรีแอกทีฟต่อแหล่งข้อมูลของมันแน่นอน)

แหล่งข้อมูลชนิดรีแอกทีฟทุกตัวจะติดตามส่วนประมวลผลทั้งหมดที่เรียกใช้มัน ดังนั้นมันก็จะแจ้งไปที่ส่วนประมวลผลนั้นๆเมื่อตัวมันเองมีค่าเปลี่ยนแปลงไป โดยเรียกใช้ฟังก์ชัน `invalidate()` กับส่วนประมวลผล

โดยทั่วไปแล้ว ส่วนประมวลผลทั้งหมดถูกกำหนดให้ทำงานแค่ประมวลผลใหม่อีกครั้ง เมื่อข้อมูลข้างในถูกทำให้ใช้การไม่ได้ (invalidation) และนั่นก็คือสิ่งที่เกิดขึ้นกับส่วนประมวลผลของเทมเพลตทั้งหมด (ถึงแม้ว่าส่วนประมวลผลของเทมเพลตจะใช้วิธีการพิเศษบางอย่างเพื่อวาดหน้าเพจขึ้นใหม่อย่างมีประสิทธิภาพด้วยก็ตาม)  แม้คุณจะสามารถควบคุมได้ว่าจะให้ส่วนประมวลผลของคุณทำอะไรได้บ้างในเวลานั้นถ้าคุณจำเป็น แต่ในทางปฏิบัติแล้ว การประมวลผลใหม่อีกครั้ง มักเป็นวิธีที่คุณนำไปใช้อยู่เสมอ

### การสร้างส่วนประมวลผล

ตอนนี้คุณก็เข้าใจทฤษฎีเบื้องหลังการทำงานของส่วนประมวลผลแล้ว แต่คุณจะเข้าใจดีขึ้นถ้าลองสร้างมันขึ้นมาซักตัว โดยเราสามารถใช้ฟังก์ชัน `Tracker.autorun` หุ้มที่บล็อกของโค้ดส่วนที่เราจะใช้เป็นพื้นที่ประมวลผล และทำให้มันรีแอกทีฟดังนี้

~~~js
Meteor.startup(function() {
  Tracker.autorun(function() {
    console.log('There are ' + Posts.find().count() + ' posts');
  });
});
~~~

สังเกตุว่า เราจำเป็นต้องหุ้มบล็อก `Tracker` ด้วยบล็อก `Meteor.startup()` เพื่อให้แน่ใจว่ามันจะทำงานครั้งแรกหลังจากที่ Meteor ได้โหลดคอลเลคชั่น `Posts` เรียบร้อยแล้ว

เบื้องหลังการทำงานก็คือ `autorun` จะสร้างส่วนประมวลผลขึ้น และผูกมันเข้าเพื่อให้มันทำงานใหม่ทุกครั้งเมื่อใดก็ตามที่แหล่งข้อมูลที่เกี่ยวพันกันมีการเปลี่ยนแปลง ซึ่งเราก็ได้สร้างส่วนประมวลผลที่ง่ายมากๆ แค่พิมพ์จำนวนข่าวออกไปที่คอนโซล และเนื่องจาก `Posts.find()` เป็นแหล่งข้อมูลชนิดรีแอกทีฟ มันก็จะคอยบอกส่วนประมวลผลให้ทำการประมวลผลใหม่ทุกครั้งที่จำนวนข่าวเปลี่ยนไป

~~~js
> Posts.insert({title: 'New Post'});
There are 4 posts.
~~~

ผลลัพธ์ของทั้งหมดนี้ก็คือ  เราสามารถเขียนโค้ดที่ใช้ข้อมูลชนิดรีแอกทีฟได้อย่างเป็นธรรมชาติ โดยรู้ว่าเบื้องหลังนั้นระบบติดตามความเกี่ยวข้องกันจะจัดการให้มีการรีรันทุกครั้งในเวลาที่เหมาะสม


