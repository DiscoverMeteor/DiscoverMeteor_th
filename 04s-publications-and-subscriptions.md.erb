---
title: การเผยแพร่และบอกรับข้อมูล
slug: publications-and-subscriptions
date: 0004/01/02
number: 4.5
sidebar: true
contents: เข้าใจการทำงานของการเผยแพร่และบอกรับข้อมูล|เรียนรู้ว่าแพ็คเกจ Autopublish ทำงานอย่างไร|ตัวอย่างแบบต่างๆของการเผยแพร่ข้อมูล
paragraphs: 52
---

การเผยแพร่และบอกรับข้อมูล เป็นหนึ่งในพื้นฐานและแนวคิดหลักของ Meteor ซึ่งอาจจะทำให้คุณหัวหมุนได้เมื่อเริ่มต้นใช้มัน

มีความเข้าใจผิดๆเกี่ยวกับเรื่องนี้อยู่มาก เช่น เชื่อว่า Meteor ไม่มีความปลอดภัย หรือแอพ Meteor ไม่สามารถทำงานกับข้อมูลปริมาณมากๆได้

เหตุผลส่วนหนึ่งที่หลายๆคนสับสนกับเรื่องนี้ในตอนแรก ก็เพราะความมหัศจรรย์ที่ Meteor ทำให้เรา แม้ว่ามันจะก่อให้เกิดประโยชน์มากมาย แต่ก็ซ่อนการทำงานจริงๆไว้เบื้องหลัง (ถึงเรียกว่ามหัศจรรย์ไง) ดังนั้นในตอนนี้เราจะมาคลายความมหัศจรรย์นี้ออก แล้วลองทำความเข้าใจกับสิ่งที่เกิดขึ้นดู

### วันเก่าๆ

ก่อนอื่นเราลองมองย้อนกลับไปในอดีตตอนปี 2011 ที่ยังไม่มี Meteor กันดู สมมุติว่าตอนนั้นคุณกำลังสร้างเว็บแอพด้วย Rails แบบง่ายๆ เมื่อมีคนเปิดเข้ามาที่เว็บไซต์คุณ ไคลเอนต์ (เช่น เบราว์เซอร์) จะส่งคำร้องขอข้อมูลเข้ามาที่แอพคุณซึ่งรันอยู่บนเซิร์ฟเวอร์

สิ่งแรกที่แอพทำคือ หาว่าผู้ใช้ต้องการเห็นข้อมูลอะไร อาจจะเป็นหน้า 12 ของผลการค้นหา, ประวัติย่อของแมรี่, 20 ทวิตล่าสุดของบ๊อบ หรืออื่นๆ คุณอาจเปรียบแอพเป็นเหมือนพนักงานในร้านหนังสือกำลังค้นที่ชั้นหนังสือหาหนังสือเรื่องที่คุณต้องการอยู่ก็ได้

เมื่อได้ข้อมูลที่ต้องการแล้ว สิ่งต่อมาที่แอพทำคือ แปลงข้อมูลนั้นให้เป็น HTML ที่เราอ่านได้ (หรือเป็น JSON ถ้าแอพเป็น API)

มองในมุมของร้านหนังสือ ก็เปรียบได้กับการหุ้มปกหนังสือที่คุณเพิ่งซื้อและใส่ถุงสวยๆ ซึ่งตรงนี้ก็คือ "View" ในโมเดล MVC ที่คนพูดถึงนั่นเอง

สุดท้าย แอพก็นำ HTML นั้นส่งกลับมาให้เบราว์เซอร์ และจบการทำงาน จากนั้นมันก็ว่างและอาจเพลินอยู่กับเบียร์ในขณะที่รอคำร้องขอข้อมูลถัดไปอยู่ก็ได้

### วิธีของ Meteor

ตอนนี้ลองมาดูสิ่งที่ทำให้ Meteor มีความพิเศษต่างออกไป จากที่เราเห็น นวัตกรรมหลักที่ Meteor ใช้ก็คือ ในขณะที่แอพ Rails ทำงานอยู่ **บนเซิร์ฟเวอร์** แต่แอพ Meteor ส่วนหนึ่งจะรัน **ที่ไคลเอนต์** (ในเบราว์เซอร์) ด้วย

<%= diagram "client-server", "Pushing a subset of the database to the client.", "pull-right" %>

เปรียบได้กับพนักงานในร้านหนังสือ ที่ไม่เพียงแต่จะหาหนังสือให้คุณ แต่ยังตามคุณมาถึงบ้านและอ่านให้คุณฟังตอนกลางคืนด้วย (เรายอมรับว่ามันฟังดูน่ากลัวไปนิด)

สถาปัตยกรรมนี้ช่วยให้ Meteor ทำอะไรที่น่าสนใจได้หลายอย่าง ตัวเด่นๆก็คือที่ Meteor เรียกว่า ฐานข้อมูลอยู่ทั่วทุกที่ ([database everywhere](http://docs.meteor.com/#sevenprinciples)) พูดง่ายๆคือ Meteor จะนำชุดข้อมูลย่อยของฐานข้อมูลมา *ทำสำเนา* และส่งให้ *ไคลเอนต์* ทุกตัว

วิธีการนี้ทำให้เกิดเรื่องที่เกี่ยวข้องสองเรื่องใหญ่ๆ คือ เรื่องแรก แทนที่จะส่งโค้ด HTML ไปให้ไคลเอนต์ Meteor จะส่ง **ข้อมูลจริง หรือข้อมูลดิบ** ไปให้ไคลเอนต์จัดการเอง ([data on the wire](http://docs.meteor.com/#sevenprinciples)) เรื่องที่สอง คุณสามารถที่จะ **เข้าถึงและแม้กระทั่งแก้ไขข้อมูลนั้นได้ทันที** โดยไม่ต้องรอให้ข้อมูลวนกลับไปที่เซิร์ฟเวอร์อีกรอบ ([latency compensation](http://docs.meteor.com/#sevenprinciples))

### การเผยแพร่ข้อมูล

ฐานข้อมูลของแอพสามารถมีข้อมูลได้ถึงหลายหมื่นรายการ บางรายการอาจเป็นข้อมูลส่วนตัวหรือส่งผลด้านอื่น ดังนั้นเพื่อความปลอดภัยและสามารถปรับขนาดข้อมูลได้ เราจึงไม่ควรส่งสำเนาข้อมูลทั้งหมดไปให้ไคลเอนต์

ดังนั้นที่เราต้องทำคือ หาวิธีบอก Meteor ว่า **ชุดข้อมูลย่อย**  ตัวไหนที่สามารถส่งไปให้ไคลเอนต์ได้บ้าง โดยเราจะทำด้วยวิธี **เผยแพร่ข้อมูล**

ตอนนี้ถ้าเรากลับไปดูที่แอพ Microscope  จะเห็นว่ารายการข่าวที่โพสต์ถูกเก็บไว้ในฐานข้อมูลแบบนี้

<%= diagram "collections-1", "All the posts contained in our database.", "pull-center" %>

ถึงแม้ใน Microscope จะยังไม่มีคุณสมบัติที่จะระบุลงไปว่าข่าวตัวไหนใช้ภาษาที่ไม่เหมาะสม และแม้ว่าเราจะยังเก็บข่าวพวกนี้ไว้ในฐานข้อมูล เราก็ไม่ควรให้ผู้ใช้เห็น (ก็คือไม่ต้องส่งไปให้ไคลเอนต์)

ในกรณีนี้ สิ่งแรกที่เราจะทำคือ บอก Meteor ว่าข่าวไหนที่เรา *ต้องการ* ส่งไปให้ไคลเอนต์ โดยเราจะบอก Meteor ให้ **เผยแพร่** เฉพาะข่าวที่ผู้ใช้ควรเห็นเท่านั้น

<%= diagram "collections-2", "Excluding flagged posts.", "pull-center" %>

ข้างล่างนี้คือ โค้ดที่เราต้องการ ซึ่งจะรันอยู่บนฝั่งเซิร์ฟเวอร์

~~~js
// on the server
Meteor.publish('posts', function() {
  return Posts.find({flagged: false});
});
~~~

โค้ดนี้ทำให้เราแน่ใจได้ว่า **ไม่มีทางเป็นไปได้** ที่ไคลเอนต์จะสามารถเข้าถึงข่าวที่ไม่เหมาะสมได้ และนี่ก็คือ วิธีการที่คุณใช้สร้างแอพ Meteor ให้ปลอดภัย โดยคุณต้องแน่ใจว่าได้เผยแพร่เฉพาะข้อมูลที่ผู้ใช้ปัจจุบันต้องการเท่านั้น

<% note do %>

### DDP

โดยพื้นฐานแล้ว คุณสามารถมองระบบเผยแพร่และรับข้อมูลนี้ เหมือนกับท่อที่ใช้ส่งข้อมูลจากคอลเลคชั่นบนเซิร์ฟเวอร์ (ต้นทาง) ไปที่คอลเลคชั่นที่ไคลเอนต์ (ปลายทาง)

โดยโปรโตคอลที่ใช้ในท่อนี้เรียกว่า **DDP** (ย่อมาจาก Distributed Data Protocol) ถ้าคุณต้องการเรียนรู้เพิ่มเติมในเรื่องนี้ คุณสามารถเข้าไปดู [การบรรยายจากงานประชุมเรื่องเรียลไทม์](http://2012.realtimeconf.com/video/matt-debergalis) โดย Matt DeBergalis (หนึ่งในผู้ก่อตั้ง Meteor) หรือที่ [สกรีนคาสต์นี้](http://www.eventedmind.com/posts/meteor-subscriptions-and-ddp) โดย Matt DeBergalis ซึ่งจะช่วยให้คุณเข้าใจแนวคิดของเรื่องนี้ในรายละเอียดที่มากขึ้นอีกนิด

<% end %>

### Subscribing

////

////

////

<%= diagram "collections-3", "Subscribing to Bob's posts will mirror them on the client.", "pull-center" %>

////

~~~js
// on the server
Meteor.publish('posts', function(author) {
  return Posts.find({flagged: false, author: author});
});
~~~

////

~~~js
// on the client
Meteor.subscribe('posts', 'bob-smith');
~~~

////

### Finding

////

<%= diagram "collections-4", "Selecting a subset of documents on the client.", "pull-center" %>

////

~~~js
// on the client
Template.posts.helpers({
  posts: function(){
    return Posts.find(author: 'bob-smith', category: 'JavaScript');
  }
});
~~~

////

### Autopublish

////

////

<%= diagram "autopublish", "Autopublish", "pull-center"%>

////

////

////

### Publishing Full Collections

////

~~~js
Meteor.publish('allPosts', function(){
  return Posts.find();
});
~~~

<%= diagram "fullcollection", "Publishing a full collection", "pull-center" %>

////

### Publishing Partial Collections

////

~~~js
Meteor.publish('somePosts', function(){
  return Posts.find({'author':'Tom'});
});
~~~

<%= diagram "partialcollection", "Publishing a partial collection", "pull-center" %>

<% note do %>

### Behind The Scenes

////

////

////

////

- ////
- ////
- ////

////

<% end %>

### Publishing Partial Properties

////

////

~~~js
Meteor.publish('allPosts', function(){
  return Posts.find({}, {fields: {
    date: false
  }});
});
~~~

<%= diagram "partialproperties", "Publishing partial properties", "pull-center" %>

////

~~~js
Meteor.publish('allPosts', function(){
  return Posts.find({'author':'Tom'}, {fields: {
    date: false
  }});
});
~~~

### Summing Up

////

////

////
